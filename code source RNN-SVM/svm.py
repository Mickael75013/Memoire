# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r5L26WWdNF_W12OhBLpxskFtW5gUdkoG
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve, auc
import matplotlib.pyplot as plt

train_file_path = 'TrainDataset.csv'
test_file_path = 'TestDataset.csv'

# Charger les données d'entraînement
train_data = pd.read_csv(train_file_path)
# Charger les données de test
test_data = pd.read_csv(test_file_path)

# Séparer les caractéristiques (X) et les étiquettes (y) dans les données d'entraînement
X_train = train_data.iloc[2:, 1:-1].values

y_train = train_data.iloc[2:, -1].apply(lambda x: x.strip("'[]'"))

# Séparer les caractéristiques (X) et les étiquettes (y) dans les données de test
X_test = test_data.iloc[2:, 1:-1].values
y_test = test_data.iloc[2:, -1].apply(lambda x: x.strip("'[]'"))

print(X_train)
print(y_train)
print(X_test)
print(y_test)

svm_model = SVC()
svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)

from sklearn.preprocessing import LabelEncoder

# Convertir les étiquettes en format numérique
le = LabelEncoder()
y_test_encoded = le.fit_transform(y_test)
y_pred_encoded = le.transform(y_pred)

# Calcul de la courbe ROC
fpr, tpr, _ = roc_curve(y_test_encoded, y_pred_encoded)
roc_auc = auc(fpr, tpr)

from tabulate import tabulate
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Calcul du rapport de classification
report = classification_report(y_test, y_pred)
report_data = [row.split() for row in report.split('\n')[2:-5]]
headers = report.split('\n')[0].split()

# Calcul de la matrice de confusion
confusion_mat = confusion_matrix(y_test, y_pred)

# Calcul de l'exactitude
accuracy = accuracy_score(y_test, y_pred)

# Calcul du taux d'erreur
error_rate = 1 - accuracy

# Préparation des données pour le tableau
results_table = [
    ["Accuracy", "{:.2f}".format(accuracy)],
    ["Classification Report", tabulate(report_data, headers=headers, tablefmt="fancy_grid")],
    ["Confusion Matrix", tabulate(confusion_mat, tablefmt="fancy_grid")],
    ["Error Rate", "{:.2f}".format(error_rate)]
]

# Affichage du tableau
print(tabulate(results_table, headers=["Metric", "Value"], tablefmt="fancy_grid"))

"""# Nouvelle section"""

# Affichage des résultats
print("Accuracy: {:.2f}".format(accuracy))
print("Classification Report:\n", classification_report)
print("Confusion Matrix:\n", confusion_mat)
print("Error Rate: {:.2f}".format(error_rate))



# Tracer la courbe ROC
plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC)')
plt.legend(loc="lower right")
plt.show()



